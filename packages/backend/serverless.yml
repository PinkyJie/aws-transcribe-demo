service: voice-assist

plugins:
  - serverless-plugin-scripts
  - serverless-offline
  - serverless-stack-output

custom:
  # this will write cloudformation output into a separate file
  output:
    file: ../frontend/src/stack.json
  AudioFileBucketName: voice-assist-${self:provider.stage}-audio-file-bucket
  UploadToS3RolePolicyName: voice-assist-${self:provider.stage}-upload-to-s3-policy
  scripts:
    hooks:
      'before:deploy:createDeploymentArtifacts': yarn build

package:
  individually: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-southeast-2
  timeout: 30
  memorySize: 256
  environment:
    DB_TABLE_NAME:
      Ref: AudiosTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt: [AudiosTable, Arn]
    - Effect: Allow
      Action:
        - sns:*
      Resource: '*'
    - Effect: Allow
      Action: transcribe:*
      Resource: '*'
    - Effect: Allow
      Action: s3:*
      Resource: '*'
    - Effect: Allow
      Action: sts:AssumeRole
      Resource: '*'

functions:
  GetToken:
    description: Function to generate a temporary access credential for frontend to upload file to S3.
    tags:
      appName: VoiceAssist
    handler: dist/getToken.handler
    package:
      exclude:
        - '**'
        - '!dist/getToken.js'
    events:
      - http:
          path: token
          method: get
          cors: true
    environment:
      ROLE_ARN:
        Fn::GetAtt: [UploadToS3Role, Arn]
  NewAudio:
    description: Function to insert audio record to DynamoDB after S3 upload.
    tags:
      appName: VoiceAssist
    handler: dist/newAudio.handler
    package:
      exclude:
        - '**'
        - '!dist/newAudio.js'
    events:
      - s3:
          bucket: ${self:custom.AudioFileBucketName}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .mp3
    environment:
      SNS_TOPIC:
        # match the sns name defiend in lambda event below
        Ref: SNSTopicNewAudioTopic
  GetAudios:
    description: Function to get audio from DynamoDB.
    tags:
      appName: VoiceAssist
    handler: dist/getAudios.handler
    package:
      exclude:
        - '**'
        - '!dist/getAudios.js'
    events:
      - http:
          path: audios
          method: get
          cors: true
  TranscribeAudio:
    description: Function to transcribe audio to text using Amazon Transcribe.
    tags:
      appName: VoiceAssist
    handler: dist/transcribeAudio.handler
    package:
      exclude:
        - '**'
        - '!dist/transcribeAudio.js'
    events:
      - sns:
          topicName: NewAudioTopic
          displayName: New audio uploaded
    environment:
      OUTPUT_BUCKET_NAME:
        Ref: TranscribedTextFileBucket
resources:
  Resources:
    # role for frontend to upload file to S3
    UploadToS3Role:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                AWS:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:sts::'
                      - Ref: AWS::AccountId
                      - ':assumed-role/'
                      # role created by serverless
                      - Ref: IamRoleLambdaExecution
                      - '/'
                      # GetToken lambda function created by serverless
                      - voice-assist-${self:provider.stage}-GetToken
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: ${self:custom.UploadToS3RolePolicyName}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action: 's3:PutObject'
                  Resource:
                    - Fn::GetAtt: [S3BucketVoiceassistdevaudiofilebucket, Arn]
    # static website hosting
    StaticWebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
        Tags:
          - Key: appName
            Value: VoiceAssist
    StaticWebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticWebsiteBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: StaticWebsiteBucket
                    - '/*'
    # the same bucket triggers lambda created by serverless
    S3BucketVoiceassistdevaudiofilebucket:
      Type: AWS::S3::Bucket
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - PUT
              AllowedOrigins:
                - Fn::GetAtt: [StaticWebsiteBucket, WebsiteURL]
              AllowedHeader: '*'
        Tags:
          - Key: appName
            Value: VoiceAssist
    AudioFileBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3BucketVoiceassistdevaudiofilebucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: S3BucketVoiceassistdevaudiofilebucket
                    - '/*'
    # store transcribed text files
    TranscribedTextFileBucket:
      Type: AWS::S3::Bucket
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
              AllowedOrigins:
                - Fn::GetAtt: [StaticWebsiteBucket, WebsiteURL]
        Tags:
          - Key: appName
            Value: VoiceAssist
    TranscribedTextFileBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: TranscribedTextFileBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: TranscribedTextFileBucket
                    - '/*'
    # store file processing status
    AudiosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        Tags:
          - Key: appName
            Value: VoiceAssist
  Outputs:
    # bucket name required by frontend
    AudioFileBucketName:
      Value:
        Ref: S3BucketVoiceassistdevaudiofilebucket
    # ServiceEndpoint will be output automatically by serverless
